{"version":3,"sources":["component/location.js","component/Head/WeatherTitle.js","component/Head/action.js","component/Head/CitySelector.js","component/Head/Head.js","component/ScrollList/EntryCard.js","component/ScrollList/ScrollList.js","App.js","serviceWorker.js","store/reducer.js","component/Head/reducer.js","store/store.js","index.js"],"names":["CITY","Los Angeles","Shanghai","getCityName","id","key","connect","state","curLocation","weather","curCity","withStyles","theme","typography","fontSize","margin","withTheme","props","classes","react_default","a","createElement","index_es","gutterBottom","align","className","color","extractCity","data","city","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","list","Symbol","iterator","next","done","info","value","push","time","dt_txt","temp","main","temp_max","temp_min","pressure","humidity","wind_speed","wind","speed","wind_deg","deg","weather_id","weather_main","weather_description","description","weather_icon","icon","err","return","CitySelector","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchWeather","values","_this2","cities","control","label","toString","row","onChange","e","Number","target","React","Component","dispatch","type","fetch","concat","then","res","json","Head","position","Grid_default","container","direction","justify","alignItems","item","xs","Head_WeatherTitle","Head_CitySelector","WEATHER_ICON","01","02","03","04","09","10","11","13","50","EntryCard","handleExpandClick","setState","expanded","react","Card_default","elevation","title","subheader","avatar","alt","src","iconId","slice","variant","onClick","fullWidth","icons_index_es","in","timeout","primary","secondary","ScrollList","cards","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","ScrollList_EntryCard","List_default","createMuiTheme","palette","light","dark","contrastText","useNextVariants","body2","overrides","MuiCard","root","width","MuiCardHeader","justifyItems","App","MuiThemeProvider_default","lg","sm","Head_Head","component_ScrollList_ScrollList","Boolean","window","location","hostname","match","combineReducers","arguments","length","action","objectSpread","flag","newCities","map","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.261d4b4d.chunk.js","sourcesContent":["export const CITY = {\n    'Los Angeles': 5368361,\n    'Shanghai': 1796231\n};","import React from 'react';\nimport * as PropTypes from \"prop-types\";\nimport {CITY} from \"../location\";\nimport {connect} from \"react-redux\";\nimport {Typography, withStyles} from \"@material-ui/core\";\n\nconst styles = theme => ({\n    typography: {\n        fontSize: '2rem',\n        margin: '0'\n    }\n});\n\nfunction WeatherTitle(props) {\n    const {classes} = props;\n    return (\n        <Typography gutterBottom align='center'\n                    className={classes.typography}\n                    color='inherit'\n        >\n            {props.curLocation}\n        </Typography>\n    );\n}\n\nWeatherTitle.propTypes = {\n    curLocation: PropTypes.string.isRequired\n};\n\nfunction getCityName(id) {\n    for (let key in CITY) {\n        if (CITY[key] === id) {\n            return key;\n        }\n    }\n    return 'None'\n}\n\nconst mapStateToProps = (state) => ({\n    curLocation: getCityName(state.weather.curCity)\n});\n\nexport default connect(mapStateToProps, null)(\n    withStyles(styles, {withTheme: true})(\n        WeatherTitle\n    )\n);\n","import fetch from 'cross-fetch'\n\nfunction extractCity(data, id) {\n    let city = {\n        id,\n        data: []\n    };\n    for (let info of data.list) {\n        city.data.push(\n            {\n                time: info.dt_txt,\n                temp: info.main.temp,\n                temp_max: info.main.temp_max,\n                temp_min: info.main.temp_min,\n                pressure: info.main.pressure,\n                humidity: info.main.humidity,\n                wind_speed: info.wind.speed,\n                wind_deg: info.wind.deg,\n                weather_id: info.weather[0].id,\n                weather_main: info.weather[0].main,\n                weather_description: info.weather[0].description,\n                weather_icon: info.weather[0].icon\n            }\n        )\n    }\n    return city\n}\n\nexport const fetchWeather = id => (dispatch) => {\n    dispatch({type: 'FETCH', id});\n    return fetch(`https://api.openweathermap.org/data/2.5/forecast?id=${id}&APPID=862f6ea3d5a071f3e2ae81ba1ed2fb18&units=metric`)\n        .then(res => res.json())\n        .then(json => {\n            dispatch({type: 'SUCCESS', city: extractCity(json, id), id})\n        });\n};\n\n","import React from \"react\";\nimport {FormControl, FormControlLabel, Radio, RadioGroup, withStyles} from \"@material-ui/core\";\nimport {CITY} from \"../location\";\nimport {fetchWeather} from \"./action\";\nimport {connect} from \"react-redux\";\nimport * as PropTypes from \"prop-types\";\n\nclass CitySelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.props.fetchWeather(Object.values(CITY)[0]);\n    }\n\n    render() {\n        let cities = [];\n        for (let key in CITY) {\n            cities.push(\n                <FormControlLabel\n                    control={<Radio/>}\n                    label={key}\n                    value={CITY[key].toString()}\n                    key={key}\n                />\n            )\n        }\n        return (\n            <FormControl>\n                <RadioGroup\n                    row\n                    value={this.props.curCity.toString()}\n                    onChange={(e) => {\n                        this.props.fetchWeather(Number(e.target.value))\n                    }}>\n                    {cities}\n                </RadioGroup>\n            </FormControl>\n        )\n    }\n}\n\nCitySelector.propTypes = {\n    curCity: PropTypes.number.isRequired,\n    fetchWeather: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    curCity: state.weather.curCity\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    fetchWeather: (id) => fetchWeather(id)(dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    CitySelector\n);","import React from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport WeatherTitle from \"./WeatherTitle\";\nimport CitySelector from \"./CitySelector\";\nimport {AppBar} from \"@material-ui/core\";\n\nfunction Head(props) {\n    return (\n        <AppBar position='static' color='primary'>\n            <Grid container direction=\"row\"\n                  justify=\"space-between\" alignItems=\"center\"\n            >\n                <Grid item xs={8}>\n                    <WeatherTitle/>\n                </Grid>\n                <Grid item xs={4}>\n                    <CitySelector/>\n                </Grid>\n            </Grid>\n        </AppBar>\n    )\n}\n\nexport default Head;","import * as React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport {\n    Avatar,\n    Button,\n    CardActions,\n    CardContent,\n    CardHeader,\n    Collapse,\n    List,\n    ListItem,\n    ListItemText,\n    Typography\n} from \"@material-ui/core\";\nimport * as PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {KeyboardArrowDown, KeyboardArrowUp} from \"@material-ui/icons\";\n\nconst WEATHER_ICON = {\n    '01': 'static/sunny.svg',\n    '02': 'static/partly.svg',\n    '03': 'static/cloudy.svg',\n    '04': 'static/cloudy.svg',\n    '09': 'static/rainy.svg',\n    '10': 'static/pourin.svg',\n    '11': 'static/lightn.svg',\n    '13': 'static/snowy.svg',\n    '50': 'static/fog.svg'\n};\n\nconst styles = theme => ({});\n\nclass EntryCard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: false\n        }\n    }\n\n    handleExpandClick = () => {\n        this.setState(state => ({\n            expanded: !state.expanded\n        }))\n    };\n\n    render() {\n        return (\n            <Card elevation={6}>\n                <CardHeader\n                    title={this.props.description}\n                    subheader={this.props.time}\n                    avatar={<Avatar alt=\"weatherIcon\" src={WEATHER_ICON[this.props.iconId.slice(0, 2)]}/>}\n                />\n                <CardContent>\n                    <Typography variant=\"subtitle1\"\n                                gutterBottom\n                                align='center'\n                    >\n                        {this.props.temp_min}°C ~ {this.props.temp_max}°C\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Button onClick={this.handleExpandClick} fullWidth={true}>\n                        <Grid container alignItems='center' justify='center'>\n                            {this.state.expanded ? <KeyboardArrowUp/> : <KeyboardArrowDown/>}\n                            {this.state.expanded ? 'Hide' : 'Show Details'}\n                        </Grid>\n                    </Button>\n                </CardActions>\n                <Collapse in={this.state.expanded} timeout=\"auto\">\n                    <List>\n                        <ListItem>\n                            <ListItemText\n                                primary='Pressure'\n                                secondary={this.props.pressure + 'hPa'}\n                            />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText\n                                primary='humidity'\n                                secondary={this.props.humidity + '%'}\n                            />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText\n                                primary='Wind Speed'\n                                secondary={this.props.wind_speed + 'm/s'}\n                            />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText\n                                primary='Wind Deg'\n                                secondary={this.props.wind_deg + '°'}\n                            />\n                        </ListItem>\n                    </List>\n                </Collapse>\n            </Card>\n        )\n    }\n\n\n}\n\nEntryCard.propTypes = {\n    description: PropTypes.string.isRequired,\n    iconId: PropTypes.string.isRequired,\n    temp_min: PropTypes.number.isRequired,\n    temp_max: PropTypes.number.isRequired,\n    time: PropTypes.string.isRequired,\n    pressure: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind_speed: PropTypes.number.isRequired,\n    wind_deg: PropTypes.number.isRequired\n};\n\nexport default EntryCard;","import * as React from \"react\";\nimport {ListItem} from \"@material-ui/core\";\nimport * as PropTypes from \"prop-types\";\nimport EntryCard from \"./EntryCard\";\nimport {connect} from \"react-redux\";\nimport List from \"@material-ui/core/List\";\n\n\nclass ScrollList extends React.Component {\n    render() {\n        let cards = [];\n        for (let city of this.props.cities) {\n            if (city.id === this.props.curCity) {\n                let key = 0;\n                for (let info of city.data) {\n                    cards.push(\n                        <ListItem key={key++}>\n                            <EntryCard\n                                description={info.weather_description}\n                                iconId={info.weather_icon}\n                                temp_min={info.temp_min}\n                                temp_max={info.temp_max}\n                                time={info.time}\n                                pressure={info.pressure}\n                                humidity={info.humidity}\n                                wind_speed={info.wind_speed}\n                                wind_deg={info.wind_deg}\n                            />\n                        </ListItem>\n                    )\n                }\n            }\n        }\n\n        return (\n            <List>\n                {cards}\n            </List>\n        )\n    }\n}\n\nScrollList.propTypes = {\n    cities: PropTypes.array.isRequired,\n    curCity: PropTypes.number.isRequired\n};\n\nconst mapStatesToProps = (state) => ({\n    cities: state.weather.cities,\n    curCity: state.weather.curCity\n});\n\nexport default connect(mapStatesToProps, null)(\n    ScrollList\n);","import React, {Component} from 'react';\nimport {createMuiTheme, Paper} from \"@material-ui/core\";\nimport Head from \"./component/Head/Head\";\nimport ScrollList from \"./component/ScrollList/ScrollList\";\nimport MuiThemeProvider from \"@material-ui/core/styles/MuiThemeProvider\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            light: '#2196f3',\n            main: \"#2196f3\",\n            dark: \"#303f9f\",\n            contrastText: \"#fff\"\n        },\n        secondary: {\n            light: '#f50057',\n            main: \"#f50057\",\n            dark: \"#c51162\",\n            contrastText: \"#fff\",\n        }\n    },\n    typography: {\n        useNextVariants: true,\n        body2: {\n            color: \"inherit\"\n        }\n    },\n    overrides: {\n        MuiCard: {\n            root: {\n                width: '100%'\n            }\n        },\n        MuiCardHeader: {\n            root: {\n                justifyItems: 'center'\n            }\n        }\n    }\n});\n\nclass App extends Component {\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <Grid container alignItems='center' justify='center'>\n                    <Grid item lg={4} sm={12}>\n                        <Paper>\n                            <Head/>\n                            <ScrollList/>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from \"redux\";\nimport {weather} from \"../component/Head/reducer\";\n\nexport default combineReducers({\n    weather\n})","export const weather = (state={cities:[], curCity: 0}, action) => {\n    switch (action.type) {\n        case 'FETCH':\n            return {\n                ...state,\n                curCity: action.id,\n            };\n        case 'SUCCESS':\n            let flag = false;\n            let newCities = state.cities.map((city)=>{\n                if (city.id === action.id){\n                    flag = true;\n                    return action.city;\n                } else {\n                    return city;\n                }\n            });\n            if (!flag) {\n                newCities.push(action.city);\n            }\n\n            return {\n                ...state,\n                cities: newCities\n            };\n        default:\n            return state;\n    }\n};\n\n","import {applyMiddleware, createStore} from \"redux\";\nimport rootReducer from './reducer';\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport thunk from 'redux-thunk';\n\nexport const store = createStore(\n    rootReducer,\n    composeWithDevTools(\n        applyMiddleware(thunk)\n    )\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}